# Generated by CodiumAI
# Adapted
from datetime import datetime, timezone

from discord_logger.logger import LogRecord, LogLevel, format_payload_embedded, LevelColor, _package_name
from discord_logger.__version__ import __version__
from discord_webhook import DiscordEmbed

from .utils import compare_emdeds


class TestFormatPayloadEmbedded:

    #  Generates a Discord embed with the correct level, app name, message, timestamp, and color.
    def test_correct_embed_generation(self):
        timestamp = datetime.now(timezone.utc)
        log_record = LogRecord(
            level=LogLevel.INFO,
            app_name="Test App",
            message="Test Message",
            timestamp=timestamp,
            thread_name=None,
            process_name=None,
            line_number=None,
            func_name=None,
            module_name=None
        )

        formatted_embed = format_payload_embedded(log_record)

        assert formatted_embed.color == int(LevelColor.INFO, 16)
        assert formatted_embed.timestamp == timestamp.isoformat()
        assert formatted_embed.author["name"] == "Test App"
        assert formatted_embed.title == "`INFO`"
        assert formatted_embed.description == "Test Message"
        assert formatted_embed.footer["text"] == f"{_package_name} {__version__}"

    #  Includes optional fields in the embed if they are present in the log record.
    def test_optional_fields_included(self):
        log_record = LogRecord(
            level=LogLevel.INFO,
            app_name="Test App",
            message="Test Message",
            timestamp=datetime.now(),
            thread_name="Thread 1",
            process_name="Process 1",
            line_number=10,
            func_name="function_1",
            module_name="module_1"
        )
        expected_embed = DiscordEmbed(
            title="`INFO`",
            description="Test Message"
        )
        expected_embed.set_author(name="Test App")
        expected_embed.set_footer(text=f"{_package_name} {__version__}")
        expected_embed.set_color("1974D2")
        expected_embed.set_timestamp(timestamp=log_record.timestamp.astimezone(tz=timezone.utc))
        expected_embed.add_embed_field(name="Thread", value="Thread 1")
        expected_embed.add_embed_field(name="Process", value="Process 1")
        expected_embed.add_embed_field(name="Line", value=10)
        expected_embed.add_embed_field(name="Function", value="function_1")
        expected_embed.add_embed_field(name="Module", value="module_1")

        assert compare_emdeds(format_payload_embedded(log_record), expected_embed)

    #  Handles log records with some optional fields set to None.
    def test_some_optional_fields_none(self):
        log_record = LogRecord(
            level=LogLevel.INFO,
            app_name="Test App",
            message="Test Message",
            timestamp=datetime.now(),
            thread_name="Thread 1",
            process_name=None,
            line_number=None,
            func_name="function_1",
            module_name=None
        )
        expected_embed = DiscordEmbed(
            title="`INFO`",
            description="Test Message"
        )
        expected_embed.set_author(name="Test App")
        expected_embed.set_footer(text=f"{_package_name} {__version__}")
        expected_embed.set_color("1974D2")
        expected_embed.set_timestamp(timestamp=log_record.timestamp.astimezone(tz=timezone.utc))
        expected_embed.add_embed_field(name="Thread", value="Thread 1")
        expected_embed.add_embed_field(name="Function", value="function_1")

        assert compare_emdeds(format_payload_embedded(log_record), expected_embed)

