import multiprocessing
import threading

# Generated by CodiumAI

import pytest

from discord_logger import get_logger, DiscordLogger
from discord_logger.logger import LogLevel


@pytest.mark.usefixtures("dummy_webhook_url", "reinit_manager")
class TestGetLogger:

    #  Returns a DiscordLogger object with the given name and default settings when called with only a name argument.
    def test_returns_logger_with_default_settings(self):
        logger = get_logger("MyApplication")
        assert isinstance(logger, DiscordLogger)
        assert logger._app_name == "MyApplication"
        assert logger._webhook.url == "https://dummy.com"
        assert logger._optional_fields == {
            'thread_name': False,
            'process_name': False,
            'module_name': False,
            'func_name': False,
            'line_number': False
        }
        assert logger._level == LogLevel.INFO
        assert logger._app_name == "MyApplication"
        assert len(logger.get_fields()) == 0

    def test_returns_logger_with_optional_fields(self):
        logger = get_logger("MyApplication", embed_all=True)
        assert logger._optional_fields == {
            'thread_name': True,
            'process_name': True,
            'module_name': True,
            'func_name': True,
            'line_number': True
        }

        assert logger._level == LogLevel.INFO
        assert logger._app_name == "MyApplication"
        assert len(logger.get_fields()) == 5
        assert logger.get_fields()['thread_name'] == threading.current_thread().name
        assert logger.get_fields()['process_name'] == multiprocessing.current_process().name

        # Hard to test with pytest
        assert logger.get_fields()['module_name'] == '__init__.py'
        # assert logger.get_fields()['func_name'] == 'main'
        # assert logger.get_fields()['line_number'] == 169

    #  Raises a TypeError when called with a non-string name argument.
    def test_raises_type_error_with_non_string_name(self):
        with pytest.raises(TypeError):
            get_logger(123)

