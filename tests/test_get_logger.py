
# Generated by CodiumAI

import pytest

from discord_logger import get_logger, DiscordLogger
from discord_logger.logger import PayloadType, LogLevel


@pytest.mark.usefixtures("dummy_webhook_url")
class TestGetLogger:

    #  Returns a DiscordLogger object with the given name and default settings when called with only a name argument.
    def test_returns_logger_with_default_settings(self):
        logger = get_logger("MyApplication")
        assert isinstance(logger, DiscordLogger)
        assert logger._app_name == "MyApplication"
        assert logger._webhook.url == "https://dummy.com"
        assert logger._payload_type == PayloadType.EMBEDDED
        assert logger._optional_fields == {
            'thread_name': False,
            'process_name': False,
            'module_name': False,
            'func_name': False,
            'line_number': False
        }
        assert logger._level == LogLevel.INFO
        assert logger._message_fmt == "{timestamp}::**{level}**::{app_name}:: {message}"
        assert logger._dispatcher == logger._dispatch_embed

    #  Raises a TypeError when called with a non-string name argument.
    def test_raises_type_error_with_non_string_name(self):
        with pytest.raises(TypeError):
            get_logger(123)

    #  Raises a ValueError when called with an unknown payload type argument.
    def test_raises_value_error_with_unknown_payload_type(self):
        with pytest.raises(TypeError):
            get_logger("MyApplication", payload_type=456)

    def test_raises_type_error_with_unknown_payload_type_str(self):
        with pytest.raises(ValueError):
            get_logger("MyApplication", payload_type="UNKNOWN")
