
# Generated by CodiumAI
# Adapted and fixed

import pytest

from discord_logger.logger import LoggerManager, DiscordLogger


@pytest.mark.usefixtures("dummy_webhook_url", "reinit_manager")
class TestLoggerManager:

    #  Can get a logger with a given name
    def test_get_logger_with_given_name(self):
        manager = LoggerManager()
        logger = manager.get_logger("MyLogger")
        assert isinstance(logger, DiscordLogger)
        assert logger._app_name == "MyLogger"

    #  If a logger with the given name already exists, returns the existing logger
    def test_get_existing_logger(self):
        manager = LoggerManager()
        logger1 = manager.get_logger("MyLogger")
        logger2 = manager.get_logger("MyLogger")
        assert logger1 is logger2

    #  Can get a logger with an empty string name
    def test_get_logger_with_empty_string_name(self):
        manager = LoggerManager()
        logger = manager.get_logger("")
        assert isinstance(logger, DiscordLogger)
        assert logger._app_name == ""

    #  Can not get a logger with a name that is not a string
    def test_get_logger_with_non_string_name(self):
        manager = LoggerManager()
        with pytest.raises(TypeError):
            logger = manager.get_logger(123)

    #  Loggers created with the same name have the same reference
    def test_same_logger_reference(self):
        logger_manager = LoggerManager()
        logger1 = logger_manager.get_logger("test_logger")
        logger2 = logger_manager.get_logger("test_logger")
        assert logger1 is logger2

    #  Can get the same logger instance from different threads
    def test_get_logger_same_instance_different_threads(self):
        import threading
        from unittest.mock import MagicMock

        # Create a mock DiscordLogger class
        class MockDiscordLogger:
            def __init__(self, name, **kwargs):
                self.name = name

        # Create a mock LoggerManager instance
        logger_manager = LoggerManager()
        logger_manager._factory = MockDiscordLogger

        # Create a mock logger instance
        mock_logger = MagicMock()
        logger_manager._registry['test_logger'] = mock_logger

        # Define a function to get the logger instance in a separate thread
        def get_logger_instance():
            logger = logger_manager.get_logger('test_logger')
            return logger

        class LoggerGetterInstance(threading.Thread):
            def __init__(self):
                super().__init__()
                self.result = None

            def run(self):
                self.result = logger_manager.get_logger("test_logger")

        # Create multiple threads to get the logger instance
        threads = []
        for _ in range(5):
            thread = LoggerGetterInstance()
            threads.append(thread)

        # Start the threads
        for thread in threads:
            thread.start()

        # Wait for all threads to finish
        for thread in threads:
            thread.join()

        # Assert that the same logger instance was returned in all threads
        for thread in threads:
            assert thread.result == mock_logger

    def test_manager_is_singleton(self):
        manager1 = LoggerManager()
        manager2 = LoggerManager()
        assert manager1 is manager2
